<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ur.mro.sup.mappers.SupContractInfoMapper" >
  <resultMap id="BaseResultMap" type="com.ur.mro.sup.model.SupContractInfo" >
    <id column="ID" property="id" jdbcType="INTEGER" javaType="Integer" />
    <result column="CONTRACT_NO" property="contractNo" jdbcType="VARCHAR" javaType="String" />
    <result column="COMMENTS" property="comments" jdbcType="NVARCHAR" javaType="String" />
    <result column="SUP_ID" property="supId" jdbcType="INTEGER" javaType="Integer" />
    <result column="CREATED_BY" property="createdBy" jdbcType="VARCHAR" javaType="String" />
    <result column="CREATED_TIME" property="createdTime" jdbcType="TIMESTAMP" javaType="Date" />
    <result column="LAST_UPDATED_BY" property="lastUpdatedBy" jdbcType="VARCHAR" javaType="String" />
    <result column="LAST_UPDATED_TIME" property="lastUpdatedTime" jdbcType="TIMESTAMP" javaType="Date" />
    <result column="DELETED" property="deleted" jdbcType="INTEGER" javaType="Integer" />
    <result column="PRICE_START_DATE" property="priceStartDate" jdbcType="TIMESTAMP" javaType="Date" />
    <result column="PRICE_END_DATE" property="priceEndDate" jdbcType="TIMESTAMP" javaType="Date" />
    <result column="PAY_WAY" property="payWay" jdbcType="NVARCHAR" javaType="String" />
    <result column="PAY_MODE" property="payMode" jdbcType="NVARCHAR" javaType="String" />
    <result column="PAY_CURRENCY" property="payCurrency" jdbcType="NVARCHAR" javaType="String" />
    <result column="PAY_CESS" property="payCess" jdbcType="VARCHAR" javaType="String" />
  </resultMap>

  <sql id="Base_Column_List" >
    ID,CONTRACT_NO,COMMENTS,SUP_ID,CREATED_BY,CREATED_TIME,LAST_UPDATED_BY,LAST_UPDATED_TIME,DELETED,PRICE_START_DATE,PRICE_END_DATE,PAY_WAY,PAY_MODE,PAY_CURRENCY,PAY_CESS
  </sql>

  <select id="getSupContractInfoByPK" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from SRM_SUP_CONTRACT
    where ID = #{id,jdbcType=INTEGER}
  </select>

  <select id="getSupContractInfoListBysupId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from SRM_SUP_CONTRACT
    where DELETED = '0' AND SUP_ID = #{supId,jdbcType=INTEGER}
  </select>

  <insert id="insertSupContractInfo" parameterType="com.ur.mro.sup.model.SupContractInfo" >
    insert into SRM_SUP_CONTRACT (
    CONTRACT_NO,COMMENTS,SUP_ID,CREATED_BY,CREATED_TIME,LAST_UPDATED_BY,LAST_UPDATED_TIME,DELETED,PRICE_START_DATE,PRICE_END_DATE,PAY_WAY,PAY_MODE,PAY_CURRENCY,PAY_CESS
    )values(
    #{contractNo,jdbcType=VARCHAR},#{comments,jdbcType=NVARCHAR},#{supId,jdbcType=INTEGER},#{createdBy,jdbcType=VARCHAR},#{createdTime,jdbcType=TIMESTAMP},#{lastUpdatedBy,jdbcType=VARCHAR},#{lastUpdatedTime,jdbcType=TIMESTAMP},#{deleted,jdbcType=INTEGER},#{priceStartDate,jdbcType=TIMESTAMP},#{priceEndDate,jdbcType=TIMESTAMP},#{payWay,jdbcType=NVARCHAR},#{payMode,jdbcType=NVARCHAR},#{payCurrency,jdbcType=NVARCHAR},#{payCess,jdbcType=VARCHAR}
    )
  </insert>

  <update id="deleteSupContractInfo" parameterType="java.lang.Integer" >
    UPDATE SRM_SUP_CONTRACT SET SRM_SUP_CONTRACT.DELETED = '1' ,LAST_UPDATED_TIME = CONVERT(varchar,GETDATE(),120)
    WHERE SRM_SUP_CONTRACT.SUP_ID = #{supId,jdbcType=INTEGER}
  </update>


  <update id="updateSupContractInfoByPKSelective" parameterType="com.ur.mro.sup.model.SupContractInfo" >
    update SRM_SUP_CONTRACT
    <set>
      <if test="contractNo != null" >
        CONTRACT_NO = #{contractNo,jdbcType=VARCHAR},
      </if>
      <if test="comments != null" >
        COMMENTS = #{comments,jdbcType=NVARCHAR},
      </if>
      <if test="supId != null" >
        SUP_ID = #{supId,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null" >
        CREATED_BY = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        CREATED_TIME = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdatedBy != null" >
        LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdatedTime != null" >
        LAST_UPDATED_TIME = #{lastUpdatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        DELETED = #{deleted,jdbcType=INTEGER},
      </if>
      <if test="priceStartDate != null" >
        PRICE_START_DATE = #{priceStartDate,jdbcType=TIMESTAMP},
      </if>
      <if test="priceEndDate != null" >
        PRICE_END_DATE = #{priceEndDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payWay != null" >
        PAY_WAY = #{payWay,jdbcType=NVARCHAR},
      </if>
      <if test="payMode != null" >
        PAY_MODE = #{payMode,jdbcType=NVARCHAR},
      </if>
      <if test="payCurrency != null" >
        PAY_CURRENCY = #{payCurrency,jdbcType=NVARCHAR},
      </if>
      <if test="payCess != null" >
        PAY_CESS = #{payCess,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>

  <!-- List<CommonSearchCondition> condList -->
  <select id="searchSupContractInfoCount" resultType="int" >
    select count(*) from SRM_SUP_CONTRACT
    <if test="condList != null" >
      <where>
        <foreach item="cond" index="index" collection="condList" separator="and">
          <if test="cond.operator=='like'">
            ${cond.columnName}
            like CONCAT(CONCAT("%",#{cond.value}),"%")
          </if>
          <if test="cond.operator =='in'">
            ${cond.columnName} in
            <foreach item="item" index="index" collection="cond.value.split(',')"  open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="cond.operator!='like' and cond.operator!='in'">
            ${cond.columnName}
            <if test="cond.operator=='eq'">
              =
            </if>
            <if test="cond.operator=='ne'">
              !=
            </if>
            <if test="cond.operator=='lt'">
              &lt;
            </if>
            <if test="cond.operator=='gt'">
              &gt;
            </if>
            <if test="cond.operator=='le'">
              &lt;=
            </if>
            <if test="cond.operator=='ge'">
              &gt;=
            </if>
            #{cond.value}
          </if>
        </foreach>
      </where>
    </if>
  </select>

  <!-- List<String> selectFields, List<CommonSearchCondition> condList, List<String> orderByList, PageBean pageBean -->
  <select id="searchSupContractInfo" resultMap="BaseResultMap" >
    select
    <choose>
      <when test="selectFields != null">
        <foreach item="field" index="index" collection="selectFields" separator=",">
          ${field}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from SRM_SUP_CONTRACT
    <if test="condList != null" >
      <where>
        <foreach item="cond" index="index" collection="condList" separator="and">
          <if test="cond.operator=='like'">
            ${cond.columnName}
            like CONCAT(CONCAT("%",#{cond.value}),"%")
          </if>
          <if test="cond.operator =='in'">
            ${cond.columnName} in
            <foreach item="item" index="index" collection="cond.value.split(',')"  open="(" separator="," close=")">
              #{item}
            </foreach>
          </if>
          <if test="cond.operator!='like' and cond.operator!='in'">
            ${cond.columnName}
            <if test="cond.operator=='eq'">
              =
            </if>
            <if test="cond.operator=='ne'">
              !=
            </if>
            <if test="cond.operator=='lt'">
              &lt;
            </if>
            <if test="cond.operator=='gt'">
              &gt;
            </if>
            <if test="cond.operator=='le'">
              &lt;=
            </if>
            <if test="cond.operator=='ge'">
              &gt;=
            </if>
            #{cond.value}
          </if>
        </foreach>
      </where>
    </if>
    <if test='orderByList != null'>
      order by
      <foreach item="order" index="index" collection="orderByList" separator=",">
        ${order}
      </foreach>
    </if>
    <if test='orderByList == null'>
      order by ID
    </if>
    <if test="pageBean != null" >
      Offset #{pageBean.startRecordNum} Row Fetch Next #{pageBean.perPageSize} Rows Only
    </if>
  </select>

  <!-- manual added -->

</mapper>